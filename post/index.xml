<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on GTKer.com</title><link>/post/</link><description>Recent content in Posts on GTKer.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 05 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementation Guide for the World of Warcraft flavor of SRP6</title><link>/implementation-guide-for-the-world-of-warcraft-flavor-of-srp6/</link><pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate><guid>/implementation-guide-for-the-world-of-warcraft-flavor-of-srp6/</guid><description>The authentication protocol for authenticating with a World of Warcraft (WoW) server is widely available but not very well documented. Most documentation is spread across forums or just directly links to RFC2945, the 8 page, 20 year old, very broad and unspecific RFC that describes SRP6 in relatively academic terms.
The goal of this article is to be an approachable, complete guide to implementing the protocol specifically for WoW 1.12 without requiring external references.</description></item><item><title>Running assembly on the BL602 RISC-V microcontroller and directly controlling GPIO</title><link>/running-assembly-on-the-bl602-risc-v-microcontroller-and-directly-controlling-gpio/</link><pubDate>Thu, 14 Jan 2021 01:48:56 +0000</pubDate><guid>/running-assembly-on-the-bl602-risc-v-microcontroller-and-directly-controlling-gpio/</guid><description>The Boufallo Lab BL602 is a 32 bit RISC-V microcontroller with support for 2.4 GHz WiFi and Bluetooth Low Energy 5.0. It has an official SDK, however even the “Hello World example” includes a large amount of boilerplate. This article will show how to manipulate the GPIO pins using assembly and no dependencies.
Git repository The full assembly and a makefile can be found in this Github repository.
Background As seen on the Pine64 BL602 EVB ver 1.</description></item><item><title>Regulating Unwanted Smart Device Traffic Using PiHole and Edgerouter X</title><link>/regulating-unwanted-smart-device-traffic-using-pihole-and-edgerouter-x/</link><pubDate>Sun, 06 Dec 2020 21:30:44 +0000</pubDate><guid>/regulating-unwanted-smart-device-traffic-using-pihole-and-edgerouter-x/</guid><description>98% of smart assistants and 72% of smart TVs use hard coded DNS servers. 1 The inclusion of ads on smart TVs even by well known brands like Samsung, Sony and LG (archive) significantly increases the need for forced DNS adblocking of devices that deliberately ignore DHCP provided DNS. A Pihole DNS by itself can prevent ads from devices that are well behaved, but misbehaving devices will have to be forced by either a firewall or router.</description></item><item><title>Improved way of rendering TeX math in Hugo</title><link>/improved-way-of-rendering-tex-math-in-hugo/</link><pubDate>Sun, 29 Nov 2020 00:09:00 +0000</pubDate><guid>/improved-way-of-rendering-tex-math-in-hugo/</guid><description>Lincoln Atkinson wrote a post about TeX math typesetting in Hugo (archive) where he described a solution that could do TeX math typesetting with and without Javascript enabled.
I have improved slightly upon his method, creating a simple Python script to download the equation images prior to publication and serving them from the local web server.
Why? The primary reason was that I wanted a missing noscript equation to be an error at compile time instead of just a dead link.</description></item></channel></rss>